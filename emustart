-- Wait for LocalPlayer
repeat wait() until game.Players.LocalPlayer

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local UserInputService = game:GetService("UserInputService")

-- Get player info
local player = Players.LocalPlayer
local username = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local playerNameFormatted = string.format("%s (@%s)", displayName, username)

-- Device type
local deviceType = "Unknown"
if UserInputService.TouchEnabled then
	deviceType = "Mobile"
elseif UserInputService.GamepadEnabled then
	deviceType = "Console"
elseif UserInputService.KeyboardEnabled then
	deviceType = "PC"
end

-- Server UID (using JobId)
local serverUID = game.JobId or "Unknown"

-- Get game info
local gameSuccess, gameInfo = pcall(function()
	return MarketplaceService:GetProductInfo(game.PlaceId)
end)

local gameName = gameSuccess and gameInfo.Name or "Unknown Game"
local placeId = game.PlaceId

local isoTime = os.date("!%Y-%m-%dT%H:%M:%SZ")

-- Build Discord embed
local embed = {
	title = "üîÅ Emulator Restart",
	description = "**A Roblox emulator restarted and rejoined the game.**",
	color = 0x3498DB,
	fields = {
		{
			name = "üë§ Player",
			value = playerNameFormatted,
			inline = true
		},
		{
			name = "üÜî User ID",
			value = tostring(userId),
			inline = true
		},
		{
			name = "üíª Device",
			value = deviceType,
			inline = true
		},
		{
			name = "üìç Game",
			value = gameName,
			inline = true
		},
		{
			name = "üÜî Place ID",
			value = tostring(placeId),
			inline = true
		},
		{
			name = "üÜî Server UID",
			value = serverUID,
			inline = true
		}
	},
	footer = {
		text = "Emulator Logger"
	},
	timestamp = isoTime
}

-- Send to Discord (using HttpService:PostAsync with error handling)
function SendEmbed(url, embed)
	local payload = HttpService:JSONEncode({ embeds = { embed } })
	local success, err = pcall(function()
		HttpService:PostAsync(url, payload, Enum.HttpContentType.ApplicationJson)
	end)
	if success then
		print("Embed sent successfully.")
	else
		warn("Failed to send embed:", err)
	end
end

SendEmbed(webhookUrl, embed)
